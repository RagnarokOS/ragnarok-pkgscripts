#!/bin/ksh

# sysupdate: update Ragnarok base system. WORK IN PROGRESS.
#
# $Ragnarok: sysupdate,v 1.6 2025/05/01 15:55:27 lecorbeau Exp $
#
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
#											#
#	Copyright (c) 2023, Ian LeCorbeau <I-LeCorbeau (at) protonmail (dot) com>	#
#											#
#	Permission to use, copy, modify, and/or distribute this software for any	#
#	purpose with or without fee is hereby granted, provided that the above		#
#	copyright notice and this permission notice appear in all copies.		#
#											#
#	THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES	#
#	WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF		#
#	MERCHANTABILITY AND FITNESS IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR		#
#	ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES		#
#	WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN		#
#	ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF		#
#	OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.			#
#											#
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

set -e
umask 0022

# If /usr/lib/ragnarok/sysupdate are not on the system, then set
# LIBPATH to lib/ (ie this repo's lib dir).
if [[ ! -d /usr/lib/ragnarok/sysupdate ]]; then
	LIBPATH="lib"
else
	LIBPATH="/usr/lib/ragnarok/sysupdate"
fi
export PATH=/usr/bin:/bin:/usr/sbin:/sbin:$LIBPATH

CONF="/etc/sysupdate.conf"
TMP=$(mktemp -d -p /tmp sysupdate.XXXXXXXXXX)
UPDIR="/var/db/sysupdate"
MIRROR=$(getvar ragnarok MIRROR "$CONF")
PUBKEY=$(getvar ragnarok PUBKEY "$CONF")

# Safety net.
# Set current directory so we can get back to it after cd'ing into TMP.
CURDIR=$(pwd)

usage() {
	printf '%s\n' "
Options:

-d	Download, but don't install, update specified as argument 1.
	This is useful if you want to downgrade a specific package.

-h	Show this help message.

-i	Install an update previously downloaded using the -d argument.

-l	List installed updates, if there are any.

-q	Check if there are any updates available.

The most common operation is to run sysupdate with no option, which will
download and install available binary updates.
"
}

# Never download stuff from the internet as the root user
# I take no credit for this function. All credit goes to
# Antoine Jacoutot, who wrote OpenBSD's syspatch(1).
unpriv() {
	local _file=$2 _ret=0 _user=sysupdate

	if [[ $1 == -f && -n ${_file} ]]; then
		# shellcheck disable=SC2188
		>${_file}
		chown "${_user}" "${_file}"
		chmod 0711 "${TMP}"
		shift 2
	fi
	(($# >= 1))

	su -s /bin/sh ${_user} -c "$@" || _ret=$?

	[[ -n ${_file} ]] && chown root "${_file}"

	return ${_ret}
}

# Download file from mirror
get_file() {
	local _file=$1

	printf '%s\n' "Downloading ${_file}..."
	unpriv -f "${TMP}/${_file}" "wget -q --show-progress -O ${TMP}/${_file} ${MIRROR}/${_file}"
}

# Verify a file's signature. If signify returns a non-zero exit status, abort
check_sig() {
	local _file="$1"

	if ! /usr/bin/signify -C -p "$PUBKEY" -x SHA256.sig "$_file"; then
		echo "Signature verification failed. Exiting..."
		exit 1
	fi
}

# Check if there are any updates
check_update() {
	local _updates

	# Fetch update file and verify its signature
	get_file
	check_sig "${TMP}/index.txt"

	_updates=$(diff "${UPDIR}/index.txt" "${TMP}/index.txt" | awk '/>/ { printf("%s ", $2) }')

	# If there are no updates, exit and return 2
	if [[ -z $_updates ]]; then
		printf '%s\n' "No updates found"
		exit 2
	else
		return 0
	fi
}

do_update() {
	local _patchdir _patches

	# If index.txt doesn't exist yet, create it
	[[ ! -f ${UPDIR}/index.txt ]] && touch "${UPDIR}/index.txt"

	check_update

	# shellcheck disable=SC2046	# We DO want word splitting.
	set -A _patches -- $(diff "${UPDIR}/index.txt" "${TMP}/index.txt" | awk '/>/ { printf("%s ", $2) }')
	printf '%s\n' "Downloading updates..." &&
	for _patch in "${_patches[@]}"; do
		get_upd "${_patch}.tgz"
	done

	for patch in "${_patches[@]}"; do
		printf '%s\n' "Verifying $_patch signature"
		check_sig "${TMP}/${_patch}.tgz"
		printf '%s\n' "Installing ${_patch}..."
		tar xvf "${TMP}/${_patch}.tgz" -C "${UPDIR}/"
		export PKGDIR="${UPDIR}/${_patch}" && emerge -avuDN --usepkgonly --with-bdeps=y @world
	done

	# Copy the new sysupdate list to ${UPDIR}
	printf '%s\n' "Updating ${UPDIR}/index.txt..."
	cp "${TMP}/index.txt" "${UPDIR}/"
	# Make sure the new list is owned by the sysupdate user
	chown sysupdate:sysupdate "${UPDIR}/index.txt"

	exit 0
}

# Download update but don't install it.
do_download() {
	local _pkg

	get_file

	_pkg=$(grep "$1" "${TMP}/index.txt")

	get_upd "${_pkg}.tgz"

	# move package to ${UPDIR}
	unpriv "cp ${TMP}/${_pkg}.tgz ${UPDIR}/"
}

# List installed update
do_list() {
	printf '%s\n' "The following updates are installed:"
	cat "${UPDIR}/index.txt"
}

# Check if updates are available.
do_query() {
	local _avail

	set -A _avail -- "$(diff "${UPDIR}/index.txt" "${TMP}/index.txt" | awk '/>/ { printf("%s ", $2) }')"
	printf '%s\n' "The following updates are available:
${_avail[*]}
"
}

# Cleanup after finish
cleanup() {
	set +e
	rm -rf "${TMP}"
}

trap 'cleanup' EXIT
trap exit HUP INT TERM

case "$1" in
	-d)	do_download "$2"
		;;
	-h)	usage
		;;
	-l)	do_list
		;;
	-q)	do_query
		;;
	*)	do_update
		;;
esac
