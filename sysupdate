#!/usr/bin/env perl

# $Ragnarok$
# 
# sysupdate: update Ragnarok base system.

use strict;
use warnings;
use Config::General;
use IPC::System::Simple qw(runx);
use List::Compare;
use File::Copy;
use File::Temp qw(tempdir);
use File::chdir;
use Getopt::Long;
Getopt::Long::Configure('pass_through');

# Get values from sysupdate.conf
my $conf	= Config::General->new(
	-ConfigFile		=> 'sysupdate.conf',
	-SplitPolicy		=> 'equalsign',
	-InterPolateVars	=> 1
);
my %config	= $conf->getall;
my $mirror	= $config{'MIRROR'};
my $pubkey	= $config{'PUBKEY'};
my $pkg_dir	= $config{'PKG_DIR'};
my $dir		= tempdir("sysupdate-XXXXXXXXXX", CLEANUP => 1);
my $update_dir	= '/var/db/sysupdate';

# Die on error. Instead of constaly writing "or die ...".
sub err {
	my ($err) = @_;

	die("Can't $err file: $!");
}

# Wrapper around runx.
sub runcmd {
	my ($cmd, @args)	= @_;

	eval {
		runx($cmd, @args);
	};
	if ($@) {
		print("Can't run $cmd: $@\n");
	}
}

# Check if updates are found.
sub checkupdate {
	my $index	= @_;

	open(my $f1, '<', $index) or err("open");
	open(my $f2, '<', "index.orig.txt") or err("open");

	my @orig = <$f1>;
	my @new = <$f2>;

	my $list = List::Compare->new(\@orig, \@new);
	my @intersection = $list->get_intersection;

	if (@intersection) {
		my @updates = $list->get_unique;
		return @updates;
	}
	close($f1) or err("close");
	close($f2) or err("close");
}

# Verify a file sig with signify(1)
sub verify_sig {
	my ($file) = @_;

	runcmd('/usr/bin/signify', "-C", "-p", "$pubkey", "-x", "SHA256.sig", "$file");
}

# Download file as the 'sysupdate' user.
sub download {
	my ($destdir, $file, $source) = @_;

	# Use lib/download script for the moment.
	runcmd('lib/download', "$destdir", "$file", "$source");
}

# List installed updates
sub list_updates {
	print("Installed Updates:\n");
	open(my $fh, '<', "index.txt") or die("Can't open sysupdate file: $!\n");
	while (my $line = <$fh>) {
		print($line);
	}
	close($fh) or die("Can't close sysupdate file: $!\n");
}

# Download and verify archives
sub get_update {
	my @archives	= @_;

	foreach my $archive (@archives) {
		download('/var/db/sysupdate', $archive, $mirror);
		if (verify_sig($archive)) {
			move("$dir/$archive", "$update_dir/$archive");
		}
	}
}

# Extract sysupdate archive
#sub extract {
#}

# Use rsync to send packages to PKGDIR, then fix Packages file
sub sync_pkgs {
	my @dirs	= @_;
	my @sorted	= sort { $a cmp $b } @dirs;

	foreach my $dir (@sorted) {
		$dir =~ s/\.tar\.xz$//i;
		runcmd('/usr/bin/rsync', '-Klrv', "$dir/", "$pkg_dir/");
	}
	runcmd('/usr/bin/emaint', '-f', 'binhost');
}

sub install_updates {
	my @updates;

	if (!checkupdate("/var/db/sysupdate/index.txt.tmp")) {
		print("No downloaded sysupdate archives found, exiting...\n");
		exit(0);
	} else {
		@updates = checkupdate("$dir/index.txt");
	}

	foreach my $update (@updates) {
		extract($update);
		sync_pkgs($update);
	}

	# run emerge command here
}

# Should this be a subroutine? Perhaps not.
sub main {
	my @updates;
	my %opts;

	# Get opts and run
	GetOptions(\%opts,
		'download',
		'install',
		'list',
		'query',
	);

	if ($opts{'list'}) {
		list_updates();
		exit(0);
	}

	# Download index.txt
	download($dir, 'index.txt', $mirror);

	# Exit early if no updates are found
	if (!checkupdate("$dir/index.txt")) {
		print("No updates found, exiting...\n");
		exit(0);
	} else {
		@updates = checkupdate("$dir/index.txt");
	}

	# The flags are mutually exclusive.
	if ($opts{'download'}) {
		get_update(@updates);
		move("$dir/index.txt", "/var/db/sysupdate/index.txt.tmp");
	} elsif ($opts{'install'}) {
		# handle installing pre-downloaded sysupdates
	} elsif ($opts{'query'}) {
		print(@updates);
	} else {
		# handle the default: download and install updates
	}
}
main
